---
description:
globs:
alwaysApply: true
---
## ディレクトリ構成

### 基本原則
- ルート直下にgoファイルを置く。特別理由がない限りはディレクトリを作らない。
- パッケージ名はディレクトリ名と一致させる。
- 単一責任の原則に従い、機能ごとにファイルを分割する。

### ディレクトリ構成ルール

#### `cmd/`
- 本リポジトリで開発しているCLIツールのエントリーポイントとなるファイルを置く
- サブディレクトリ名はコマンド名と一致させる（例：`cmd/olconv/`）
- `main.go`のみを配置し、ビジネスロジックは含めない
- フラグやコマンドライン引数の処理のみを行う

#### `test/`
- テスト用のファイルやテストデータを置く
- 実際のテストファイル（`*_test.go`）はルート直下に配置
- テスト用のMarkdownファイルやサンプルデータを配置

#### `.work/`
- このディレクトリはignore

### ファイル配置ルール

#### ルートディレクトリ
- **パッケージファイル**：メインのロジックを含むGoファイル
  - `convert.go`：変換ロジック
  - `files.go`：ファイル操作関連
  - その他機能別ファイル
- **テストファイル**：`*_test.go`形式
- **設定ファイル**：`go.mod`, `go.sum`, `.gitignore`
- **ドキュメント**：`README.md`, `LICENSE`

#### ファイル命名規則
- **機能ベース命名**：機能や責任に基づいてファイル名を決定
- **テストファイル**：対象ファイル名 + `_test.go`（例：`convert_test.go`）
- **実験的ファイル**：末尾に`_`を付ける（例：`lexer.go_`, `files_test.go_`）
- **スネークケース**：複数単語の場合はアンダースコアで区切る

### パッケージ構成
- **メインパッケージ**：`olconv`（プロジェクト名と一致）
- **外部公開**：公開したい型や関数は大文字で開始
- **内部使用**：小文字で開始し、パッケージ内でのみ使用

### 依存関係管理
- **最小限の依存**：必要最小限の外部ライブラリのみ使用
- **標準ライブラリ優先**：可能な限り標準ライブラリを使用
- **テスト依存**：テスト専用の依存関係は明確に分離

### 禁止事項
- **深いネスト**：3階層を超えるディレクトリ構造は原則禁止
- **機能重複**：同じ機能を複数ファイルに分散させない
- **循環依存**：パッケージ間の循環依存は禁止
- **巨大ファイル**：1つのファイルが500行を超える場合は分割を検討

### 推奨事項
- **単一責任**：1つのファイルは1つの主要な責任を持つ
- **適切な粒度**：機能的に関連するコードをまとめる
- **明確な境界**：パッケージ間の境界を明確にする
- **テスタビリティ**：テストしやすい構造を心がける

